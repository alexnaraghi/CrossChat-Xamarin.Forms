<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>
<#@ assembly name="System.Runtime.dll" #>
<#@ assembly name="$(SolutionDir)Server\SharedSquawk.Server.Application\bin\Debug\SharedSquawk.Server.Application.DataTransferObjects.dll" #>
<#@ assembly name="$(SolutionDir)Server\SharedSquawk.Server.Application\bin\Debug\SharedSquawk.Server.Application.dll" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="SharedSquawk.Server.Application.Seedwork" #>
<#@ import namespace="SharedSquawk.Server.Application.Services" #>
<#@ import namespace="SharedSquawk.Server.Application.DataTransferObjects.Requests" #>
<#@ output extension=".cs" #>
using System.Threading.Tasks;
using SharedSquawk.Server.Application.DataTransferObjects.Requests;


namespace SharedSquawk.Client.Model.Proxies
{
<# 
var appAssembly = Assembly.GetAssembly(typeof (AppService));
var appServiceTypes = appAssembly.GetTypes().Where(t => t.IsSubclassOf(typeof(AppService))).ToList();

    foreach (var serviceType in appServiceTypes)
    {
	string typeName = serviceType.Name + "Proxy";
#>

	
    /// <summary>
    /// Autogenerated proxy for AppController
    /// </summary>
	public partial class <#=typeName#> : ServiceProxyBase
	{
        public <#=typeName#>(ConnectionManager connectionManager) : base(connectionManager)
        {
        }

<#
var methods = serviceType.GetMethods();
foreach (var method in methods)
{
	var methodName = method.Name;
	var parameters = method.GetParameters();
	if (parameters.Length != 2)
		continue;

	Type requestType = null;
	if (parameters[0].ParameterType.IsSubclassOf(typeof(RequestBase)))
    {
		requestType = parameters[0].ParameterType;
    }
	else if (parameters[1].ParameterType.IsSubclassOf(typeof(RequestBase)))
    {
		requestType = parameters[1].ParameterType;
    }
	else continue;

	var responseTypeName = method.ReturnType.Name;
	bool isVoid = method.ReturnType == typeof(void);
	
	if (!isVoid)
    {
#>

		public Task<<#=responseTypeName#>> <#=methodName#>(<#=requestType.Name#> request)
		{
			return ConnectionManager.SendRequestAndWaitResponse<<#=responseTypeName#>>(request);
		}
<#
    }
	else
    {
#>

		public void <#=methodName#>(<#=requestType.Name#> request)
		{
			ConnectionManager.SendRequest(request);
		}
<#
    }
}
#>		
	}

<#
    }#>
}